---

- name: Refresh inventory
  meta: refresh_inventory

- name: Check that you can connect (GET) to Ghost and it returns a status 200
  ansible.builtin.uri:
    url: "http://{{ ghost_ip }}:{{ghost_port}}/"
    method: GET
    status_code: 200
  register: result
  until: result.status == 200
  retries: 3
  delay: 5

- name: Check that you can add a User
  ansible.builtin.uri:
    url: "http://{{ ghost_ip }}/members/api/send-magic-link/"
    method: POST
    status_code: 201
    body: "{\"name\":\"{{ new_user }}\",\"email\":\"{{ new_user_email }}\",\"requestSrc\":\"portal\"}"
    body_format: json
    headers:
      Content-Type: "application/json"
    mode: cors
  register: result

-    debug:
       msg: "Name: {{ new_user }} | Email: {{ new_user_email }} | {{ result.msg }}"

- name: Check that mail was received in Mailtrap
  shell: | 
      export MAILTRAP_KEY={{ mailtrap_key }}
      envsubst < test.py | python3 
      unset MAILTRAP_KEY
  register: result

-    debug:
       msg: "{{ result.stdout.split('|') }}"


- name: Check that you can login
  ansible.builtin.uri:
    url: "http://{{ ghost_ip }}/members/api/send-magic-link/"
    method: POST
    status_code: 201
    body:  "{\"email\":\"{{ new_user_email }}\",\"requestSrc\":\"portal\"}"
    body_format: json
    headers:
      Content-Type: "application/json"
    mode: cors
  register: result

-    debug:
       msg: "Email: {{ new_user_email }} | {{ result.msg }}"

- name: Check that mail was received in Mailtrap
  shell: | 
      export MAILTRAP_KEY={{ mailtrap_key }}
      envsubst < test.py | python3 
      unset MAILTRAP_KEY
  register: result

-    debug:
       msg: "{{ result.stdout.split('|') }}"

- name: Get MySQL Pod
  shell: kubectl get pod -l app=mysql -o jsonpath='{.items[0].metadata.name}'
  register: pod_name

- name: Check new member in MySQL
  shell: kubectl exec {{ pod_name.stdout }} -c mysql -- mysql --user="teste" --password={{ ghost_db_password }} --database="ghost" --execute="select id from members where email='{{ new_user_email }}';"
  register: result

-    debug:
       msg: "{{ result.stdout.split('\n') }}"

- name: Update Fact
  set_fact:
    result: "{{ result.stdout.split('\n')[1] }}"

- name: Check logins
  shell: kubectl exec {{ pod_name.stdout }} -c mysql -- mysql --user="teste" --password={{ ghost_db_password }} --database="ghost" --execute="select created_at from members_login_events where member_id='{{ result }}';"
  register: result

-    debug:
       msg: "{{ result.stdout.split('\n') }}"
